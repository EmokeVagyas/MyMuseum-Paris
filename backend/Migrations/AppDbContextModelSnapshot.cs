// <auto-generated />
using System;
using Backend.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Domain.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Condition", b =>
                {
                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.PrimitiveCollection<string>("ExcludedMonths")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("WeekOfMonth")
                        .HasColumnType("int");

                    b.HasKey("ConditionId");

                    b.ToTable("Condition");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExceptionalDay", b =>
                {
                    b.Property<int>("ExceptionalDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExceptionalDayId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFree")
                        .HasColumnType("bit");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("ExceptionalDayId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ExceptionalDays");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Museum", b =>
                {
                    b.Property<int>("MuseumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MuseumId"));

                    b.Property<int>("Accessibility")
                        .HasColumnType("int");

                    b.Property<bool>("AudioGuide")
                        .HasColumnType("bit");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Environment")
                        .HasColumnType("int");

                    b.Property<bool>("GuidedTours")
                        .HasColumnType("bit");

                    b.Property<int>("Languages")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("MuseumId");

                    b.HasIndex("CityId");

                    b.ToTable("Museums");
                });

            modelBuilder.Entity("Backend.Domain.Entities.MuseumFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FeatureType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MuseumFeatures");
                });

            modelBuilder.Entity("Backend.Domain.Entities.MuseumFeatureAssociation", b =>
                {
                    b.Property<int>("MuseumId")
                        .HasColumnType("int");

                    b.Property<int>("MuseumFeatureOptionId")
                        .HasColumnType("int");

                    b.HasKey("MuseumId", "MuseumFeatureOptionId");

                    b.HasIndex("MuseumFeatureOptionId");

                    b.ToTable("MuseumFeatureAssociations");
                });

            modelBuilder.Entity("Backend.Domain.Entities.MuseumFeatureOption", b =>
                {
                    b.Property<int>("MuseumFeatureOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MuseumFeatureOptionId"));

                    b.Property<int>("MuseumFeatureId")
                        .HasColumnType("int");

                    b.Property<string>("OptionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MuseumFeatureOptionId");

                    b.HasIndex("MuseumFeatureId");

                    b.ToTable("MuseumFeatureOptions");
                });

            modelBuilder.Entity("Backend.Domain.Entities.MuseumSchedule", b =>
                {
                    b.Property<int>("MuseumId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("MuseumId", "ScheduleId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("MuseumSchedules");
                });

            modelBuilder.Entity("Backend.Domain.Entities.OpeningHour", b =>
                {
                    b.Property<int>("OpeningHourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpeningHourId"));

                    b.Property<TimeOnly?>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int?>("ExceptionalDayId")
                        .HasColumnType("int");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<int?>("OpeningPeriodId")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("OpeningHourId");

                    b.HasIndex("ExceptionalDayId");

                    b.HasIndex("OpeningPeriodId");

                    b.ToTable("OpeningHours");
                });

            modelBuilder.Entity("Backend.Domain.Entities.OpeningPeriod", b =>
                {
                    b.Property<int>("OpeningPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpeningPeriodId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("LastEntryOffset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomClearingOffset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("OpeningPeriodId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("OpeningPeriods");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShopId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ShopSchedule", b =>
                {
                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("ShopId", "ScheduleId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ShopSchedules");
                });

            modelBuilder.Entity("Backend.Domain.Entities.SpecialRule", b =>
                {
                    b.Property<int>("SpecialRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialRuleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialRuleId");

                    b.ToTable("SpecialRule");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Domain.Entities.City", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Condition", b =>
                {
                    b.HasOne("Backend.Domain.Entities.SpecialRule", null)
                        .WithOne("Condition")
                        .HasForeignKey("Backend.Domain.Entities.Condition", "ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExceptionalDay", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Schedule", "Schedule")
                        .WithMany("ExceptionalDays")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Museum", b =>
                {
                    b.HasOne("Backend.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Backend.Domain.Entities.MuseumFeatureAssociation", b =>
                {
                    b.HasOne("Backend.Domain.Entities.MuseumFeatureOption", "MuseumFeatureOption")
                        .WithMany()
                        .HasForeignKey("MuseumFeatureOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.Museum", "Museum")
                        .WithMany("MuseumFeatureAssociations")
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Museum");

                    b.Navigation("MuseumFeatureOption");
                });

            modelBuilder.Entity("Backend.Domain.Entities.MuseumFeatureOption", b =>
                {
                    b.HasOne("Backend.Domain.Entities.MuseumFeature", "MuseumFeature")
                        .WithMany("MuseumFeatureOptions")
                        .HasForeignKey("MuseumFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MuseumFeature");
                });

            modelBuilder.Entity("Backend.Domain.Entities.MuseumSchedule", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Museum", "Museum")
                        .WithMany("MuseumSchedules")
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Museum");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Backend.Domain.Entities.OpeningHour", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ExceptionalDay", "ExceptionalDay")
                        .WithMany("OpeningHours")
                        .HasForeignKey("ExceptionalDayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Domain.Entities.OpeningPeriod", null)
                        .WithMany("OpeningHours")
                        .HasForeignKey("OpeningPeriodId");

                    b.Navigation("ExceptionalDay");
                });

            modelBuilder.Entity("Backend.Domain.Entities.OpeningPeriod", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Schedule", "Schedule")
                        .WithMany("OpeningPeriods")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Shop", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Museum", null)
                        .WithOne("Shop")
                        .HasForeignKey("Backend.Domain.Entities.Shop", "ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.ShopSchedule", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.Shop", "Shop")
                        .WithMany("ShopSchedules")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExceptionalDay", b =>
                {
                    b.Navigation("OpeningHours");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Museum", b =>
                {
                    b.Navigation("MuseumFeatureAssociations");

                    b.Navigation("MuseumSchedules");

                    b.Navigation("Shop")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.MuseumFeature", b =>
                {
                    b.Navigation("MuseumFeatureOptions");
                });

            modelBuilder.Entity("Backend.Domain.Entities.OpeningPeriod", b =>
                {
                    b.Navigation("OpeningHours");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Schedule", b =>
                {
                    b.Navigation("ExceptionalDays");

                    b.Navigation("OpeningPeriods");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Shop", b =>
                {
                    b.Navigation("ShopSchedules");
                });

            modelBuilder.Entity("Backend.Domain.Entities.SpecialRule", b =>
                {
                    b.Navigation("Condition")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
